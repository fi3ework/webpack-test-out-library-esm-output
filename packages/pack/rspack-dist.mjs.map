{"version":3,"file":"rspack-dist.mjs","sources":["webpack://@monorepo/pack/../../submodules/redux/src/applyMiddleware.ts","webpack://@monorepo/pack/../../submodules/redux/src/bindActionCreators.ts","webpack://@monorepo/pack/../../submodules/redux/src/combineReducers.ts","webpack://@monorepo/pack/../../submodules/redux/src/compose.ts","webpack://@monorepo/pack/../../submodules/redux/src/createStore.ts","webpack://@monorepo/pack/../../submodules/redux/src/index.ts","webpack://@monorepo/pack/../../submodules/redux/src/types/actions.ts","webpack://@monorepo/pack/../../submodules/redux/src/types/middleware.ts","webpack://@monorepo/pack/../../submodules/redux/src/types/reducers.ts","webpack://@monorepo/pack/../../submodules/redux/src/utils/actionTypes.ts","webpack://@monorepo/pack/../../submodules/redux/src/utils/isAction.ts","webpack://@monorepo/pack/../../submodules/redux/src/utils/isPlainObject.ts","webpack://@monorepo/pack/../../submodules/redux/src/utils/kindOf.ts","webpack://@monorepo/pack/../../submodules/redux/src/utils/symbol-observable.ts"],"sourcesContent":["import compose from './compose'\nimport type { Middleware, MiddlewareAPI } from './types/middleware'\nimport type { StoreEnhancer, Dispatch } from './types/store'\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param middlewares The middleware chain to be applied.\n * @returns A store enhancer applying the middleware.\n *\n * @template Ext Dispatch signature added by a middleware.\n * @template S The type of the state supported by a middleware.\n */\nexport default function applyMiddleware(): StoreEnhancer\nexport default function applyMiddleware<Ext1, S>(\n  middleware1: Middleware<Ext1, S, any>\n): StoreEnhancer<{ dispatch: Ext1 }>\nexport default function applyMiddleware<Ext1, Ext2, S>(\n  middleware1: Middleware<Ext1, S, any>,\n  middleware2: Middleware<Ext2, S, any>\n): StoreEnhancer<{ dispatch: Ext1 & Ext2 }>\nexport default function applyMiddleware<Ext1, Ext2, Ext3, S>(\n  middleware1: Middleware<Ext1, S, any>,\n  middleware2: Middleware<Ext2, S, any>,\n  middleware3: Middleware<Ext3, S, any>\n): StoreEnhancer<{ dispatch: Ext1 & Ext2 & Ext3 }>\nexport default function applyMiddleware<Ext1, Ext2, Ext3, Ext4, S>(\n  middleware1: Middleware<Ext1, S, any>,\n  middleware2: Middleware<Ext2, S, any>,\n  middleware3: Middleware<Ext3, S, any>,\n  middleware4: Middleware<Ext4, S, any>\n): StoreEnhancer<{ dispatch: Ext1 & Ext2 & Ext3 & Ext4 }>\nexport default function applyMiddleware<Ext1, Ext2, Ext3, Ext4, Ext5, S>(\n  middleware1: Middleware<Ext1, S, any>,\n  middleware2: Middleware<Ext2, S, any>,\n  middleware3: Middleware<Ext3, S, any>,\n  middleware4: Middleware<Ext4, S, any>,\n  middleware5: Middleware<Ext5, S, any>\n): StoreEnhancer<{ dispatch: Ext1 & Ext2 & Ext3 & Ext4 & Ext5 }>\nexport default function applyMiddleware<Ext, S = any>(\n  ...middlewares: Middleware<any, S, any>[]\n): StoreEnhancer<{ dispatch: Ext }>\nexport default function applyMiddleware(\n  ...middlewares: Middleware[]\n): StoreEnhancer<any> {\n  return createStore => (reducer, preloadedState) => {\n    const store = createStore(reducer, preloadedState)\n    let dispatch: Dispatch = () => {\n      throw new Error(\n        'Dispatching while constructing your middleware is not allowed. ' +\n          'Other middleware would not be applied to this dispatch.'\n      )\n    }\n\n    const middlewareAPI: MiddlewareAPI = {\n      getState: store.getState,\n      dispatch: (action, ...args) => dispatch(action, ...args)\n    }\n    const chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose<typeof dispatch>(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}\n","import type { Dispatch } from './types/store'\nimport type { ActionCreator, ActionCreatorsMapObject, Action } from './types/actions'\nimport { kindOf } from './utils/kindOf'\n\nfunction bindActionCreator<A extends Action>(\n  actionCreator: ActionCreator<A>,\n  dispatch: Dispatch<A>\n) {\n  return function (this: any, ...args: any[]) {\n    return dispatch(actionCreator.apply(this, args))\n  }\n}\n\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use `import * as`\n * syntax. You may also pass a single function.\n *\n * @param dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\nexport default function bindActionCreators<A, C extends ActionCreator<A>>(\n  actionCreator: C,\n  dispatch: Dispatch\n): C\n\nexport default function bindActionCreators<\n  A extends ActionCreator<any>,\n  B extends ActionCreator<any>\n>(actionCreator: A, dispatch: Dispatch): B\n\nexport default function bindActionCreators<\n  A,\n  M extends ActionCreatorsMapObject<A>\n>(actionCreators: M, dispatch: Dispatch): M\nexport default function bindActionCreators<\n  M extends ActionCreatorsMapObject,\n  N extends ActionCreatorsMapObject\n>(actionCreators: M, dispatch: Dispatch): N\n\nexport default function bindActionCreators(\n  actionCreators: ActionCreator<any> | ActionCreatorsMapObject,\n  dispatch: Dispatch\n) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch)\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\n      `bindActionCreators expected an object or a function, but instead received: '${kindOf(\n        actionCreators\n      )}'. ` +\n        `Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`\n    )\n  }\n\n  const boundActionCreators: ActionCreatorsMapObject = {}\n  for (const key in actionCreators) {\n    const actionCreator = actionCreators[key]\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)\n    }\n  }\n  return boundActionCreators\n}\n","import type { Action } from './types/actions'\nimport type {\n  ActionFromReducersMapObject,\n  PreloadedStateShapeFromReducersMapObject,\n  Reducer,\n  StateFromReducersMapObject\n} from './types/reducers'\n\nimport ActionTypes from './utils/actionTypes'\nimport isPlainObject from './utils/isPlainObject'\nimport warning from './utils/warning'\nimport { kindOf } from './utils/kindOf'\n\nfunction getUnexpectedStateShapeWarningMessage(\n  inputState: object,\n  reducers: { [key: string]: Reducer<any, any, any> },\n  action: Action,\n  unexpectedKeyCache: { [key: string]: true }\n) {\n  const reducerKeys = Object.keys(reducers)\n  const argumentName =\n    action && action.type === ActionTypes.INIT\n      ? 'preloadedState argument passed to createStore'\n      : 'previous state received by the reducer'\n\n  if (reducerKeys.length === 0) {\n    return (\n      'Store does not have a valid reducer. Make sure the argument passed ' +\n      'to combineReducers is an object whose values are reducers.'\n    )\n  }\n\n  if (!isPlainObject(inputState)) {\n    return (\n      `The ${argumentName} has unexpected type of \"${kindOf(\n        inputState\n      )}\". Expected argument to be an object with the following ` +\n      `keys: \"${reducerKeys.join('\", \"')}\"`\n    )\n  }\n\n  const unexpectedKeys = Object.keys(inputState).filter(\n    key => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]\n  )\n\n  unexpectedKeys.forEach(key => {\n    unexpectedKeyCache[key] = true\n  })\n\n  if (action && action.type === ActionTypes.REPLACE) return\n\n  if (unexpectedKeys.length > 0) {\n    return (\n      `Unexpected ${unexpectedKeys.length > 1 ? 'keys' : 'key'} ` +\n      `\"${unexpectedKeys.join('\", \"')}\" found in ${argumentName}. ` +\n      `Expected to find one of the known reducer keys instead: ` +\n      `\"${reducerKeys.join('\", \"')}\". Unexpected keys will be ignored.`\n    )\n  }\n}\n\nfunction assertReducerShape(reducers: {\n  [key: string]: Reducer<any, any, any>\n}) {\n  Object.keys(reducers).forEach(key => {\n    const reducer = reducers[key]\n    const initialState = reducer(undefined, { type: ActionTypes.INIT })\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\n        `The slice reducer for key \"${key}\" returned undefined during initialization. ` +\n          `If the state passed to the reducer is undefined, you must ` +\n          `explicitly return the initial state. The initial state may ` +\n          `not be undefined. If you don't want to set a value for this reducer, ` +\n          `you can use null instead of undefined.`\n      )\n    }\n\n    if (\n      typeof reducer(undefined, {\n        type: ActionTypes.PROBE_UNKNOWN_ACTION()\n      }) === 'undefined'\n    ) {\n      throw new Error(\n        `The slice reducer for key \"${key}\" returned undefined when probed with a random type. ` +\n          `Don't try to handle '${ActionTypes.INIT}' or other actions in \"redux/*\" ` +\n          `namespace. They are considered private. Instead, you must return the ` +\n          `current state for any unknown actions, unless it is undefined, ` +\n          `in which case you must return the initial state, regardless of the ` +\n          `action type. The initial state may not be undefined, but can be null.`\n      )\n    }\n  })\n}\n\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @template S Combined state object type.\n *\n * @param reducers An object whose values correspond to different reducer\n *   functions that need to be combined into one. One handy way to obtain it\n *   is to use `import * as reducers` syntax. The reducers may never\n *   return undefined for any action. Instead, they should return their\n *   initial state if the state passed to them was undefined, and the current\n *   state for any unrecognized action.\n *\n * @returns A reducer function that invokes every reducer inside the passed\n *   object, and builds a state object with the same shape.\n */\nexport default function combineReducers<M>(\n  reducers: M\n): M[keyof M] extends Reducer<any, any, any> | undefined\n  ? Reducer<\n      StateFromReducersMapObject<M>,\n      ActionFromReducersMapObject<M>,\n      Partial<PreloadedStateShapeFromReducersMapObject<M>>\n    >\n  : never\nexport default function combineReducers(reducers: {\n  [key: string]: Reducer<any, any, any>\n}) {\n  const reducerKeys = Object.keys(reducers)\n  const finalReducers: { [key: string]: Reducer<any, any, any> } = {}\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i]\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(`No reducer provided for key \"${key}\"`)\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key]\n    }\n  }\n  const finalReducerKeys = Object.keys(finalReducers)\n\n  // This is used to make sure we don't warn about the same\n  // keys multiple times.\n  let unexpectedKeyCache: { [key: string]: true }\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {}\n  }\n\n  let shapeAssertionError: unknown\n  try {\n    assertReducerShape(finalReducers)\n  } catch (e) {\n    shapeAssertionError = e\n  }\n\n  return function combination(\n    state: StateFromReducersMapObject<typeof reducers> = {},\n    action: Action\n  ) {\n    if (shapeAssertionError) {\n      throw shapeAssertionError\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      const warningMessage = getUnexpectedStateShapeWarningMessage(\n        state,\n        finalReducers,\n        action,\n        unexpectedKeyCache\n      )\n      if (warningMessage) {\n        warning(warningMessage)\n      }\n    }\n\n    let hasChanged = false\n    const nextState: StateFromReducersMapObject<typeof reducers> = {}\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i]\n      const reducer = finalReducers[key]\n      const previousStateForKey = state[key]\n      const nextStateForKey = reducer(previousStateForKey, action)\n      if (typeof nextStateForKey === 'undefined') {\n        const actionType = action && action.type\n        throw new Error(\n          `When called with an action of type ${\n            actionType ? `\"${String(actionType)}\"` : '(unknown type)'\n          }, the slice reducer for key \"${key}\" returned undefined. ` +\n            `To ignore an action, you must explicitly return the previous state. ` +\n            `If you want this reducer to hold no value, you can return null instead of undefined.`\n        )\n      }\n      nextState[key] = nextStateForKey\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey\n    }\n    hasChanged =\n      hasChanged || finalReducerKeys.length !== Object.keys(state).length\n    return hasChanged ? nextState : state\n  }\n}\n","type Func<T extends any[], R> = (...a: T) => R\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for the\n * resulting composite function.\n *\n * @param funcs The functions to compose.\n * @returns A function obtained by composing the argument functions from right\n *   to left. For example, `compose(f, g, h)` is identical to doing\n *   `(...args) => f(g(h(...args)))`.\n */\nexport default function compose(): <R>(a: R) => R\n\nexport default function compose<F extends Function>(f: F): F\n\n/* two functions */\nexport default function compose<A, T extends any[], R>(\n  f1: (a: A) => R,\n  f2: Func<T, A>\n): Func<T, R>\n\n/* three functions */\nexport default function compose<A, B, T extends any[], R>(\n  f1: (b: B) => R,\n  f2: (a: A) => B,\n  f3: Func<T, A>\n): Func<T, R>\n\n/* four functions */\nexport default function compose<A, B, C, T extends any[], R>(\n  f1: (c: C) => R,\n  f2: (b: B) => C,\n  f3: (a: A) => B,\n  f4: Func<T, A>\n): Func<T, R>\n\n/* rest */\nexport default function compose<R>(\n  f1: (a: any) => R,\n  ...funcs: Function[]\n): (...args: any[]) => R\n\nexport default function compose<R>(...funcs: Function[]): (...args: any[]) => R\n\nexport default function compose(...funcs: Function[]) {\n  if (funcs.length === 0) {\n    // infer the argument type so it is usable in inference down the line\n    return <T>(arg: T) => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce(\n    (a, b) =>\n      (...args: any) =>\n        a(b(...args))\n  )\n}\n","import $$observable from './utils/symbol-observable'\n\nimport type {\n  Store,\n  StoreEnhancer,\n  Dispatch,\n  Observer,\n  ListenerCallback,\n  UnknownIfNonSpecific\n} from './types/store'\nimport type { Action } from './types/actions'\nimport type { Reducer } from './types/reducers'\nimport ActionTypes from './utils/actionTypes'\nimport isPlainObject from './utils/isPlainObject'\nimport { kindOf } from './utils/kindOf'\n\n/**\n * @deprecated\n *\n * **We recommend using the `configureStore` method\n * of the `@reduxjs/toolkit` package**, which replaces `createStore`.\n *\n * Redux Toolkit is our recommended approach for writing Redux logic today,\n * including store setup, reducers, data fetching, and more.\n *\n * **For more details, please read this Redux docs page:**\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * `configureStore` from Redux Toolkit is an improved version of `createStore` that\n * simplifies setup and helps avoid common bugs.\n *\n * You should not be using the `redux` core package by itself today, except for learning purposes.\n * The `createStore` method from the core `redux` package will not be removed, but we encourage\n * all users to migrate to using Redux Toolkit for all Redux code.\n *\n * If you want to use `createStore` without this visual deprecation warning, use\n * the `legacy_createStore` import instead:\n *\n * `import { legacy_createStore as createStore} from 'redux'`\n *\n */\nexport function createStore<\n  S,\n  A extends Action,\n  Ext extends {} = {},\n  StateExt extends {} = {}\n>(\n  reducer: Reducer<S, A>,\n  enhancer?: StoreEnhancer<Ext, StateExt>\n): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext\n/**\n * @deprecated\n *\n * **We recommend using the `configureStore` method\n * of the `@reduxjs/toolkit` package**, which replaces `createStore`.\n *\n * Redux Toolkit is our recommended approach for writing Redux logic today,\n * including store setup, reducers, data fetching, and more.\n *\n * **For more details, please read this Redux docs page:**\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * `configureStore` from Redux Toolkit is an improved version of `createStore` that\n * simplifies setup and helps avoid common bugs.\n *\n * You should not be using the `redux` core package by itself today, except for learning purposes.\n * The `createStore` method from the core `redux` package will not be removed, but we encourage\n * all users to migrate to using Redux Toolkit for all Redux code.\n *\n * If you want to use `createStore` without this visual deprecation warning, use\n * the `legacy_createStore` import instead:\n *\n * `import { legacy_createStore as createStore} from 'redux'`\n *\n */\nexport function createStore<\n  S,\n  A extends Action,\n  Ext extends {} = {},\n  StateExt extends {} = {},\n  PreloadedState = S\n>(\n  reducer: Reducer<S, A, PreloadedState>,\n  preloadedState?: PreloadedState | undefined,\n  enhancer?: StoreEnhancer<Ext, StateExt>\n): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext\nexport function createStore<\n  S,\n  A extends Action,\n  Ext extends {} = {},\n  StateExt extends {} = {},\n  PreloadedState = S\n>(\n  reducer: Reducer<S, A, PreloadedState>,\n  preloadedState?: PreloadedState | StoreEnhancer<Ext, StateExt> | undefined,\n  enhancer?: StoreEnhancer<Ext, StateExt>\n): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext {\n  if (typeof reducer !== 'function') {\n    throw new Error(\n      `Expected the root reducer to be a function. Instead, received: '${kindOf(\n        reducer\n      )}'`\n    )\n  }\n\n  if (\n    (typeof preloadedState === 'function' && typeof enhancer === 'function') ||\n    (typeof enhancer === 'function' && typeof arguments[3] === 'function')\n  ) {\n    throw new Error(\n      'It looks like you are passing several store enhancers to ' +\n        'createStore(). This is not supported. Instead, compose them ' +\n        'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.'\n    )\n  }\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState as StoreEnhancer<Ext, StateExt>\n    preloadedState = undefined\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error(\n        `Expected the enhancer to be a function. Instead, received: '${kindOf(\n          enhancer\n        )}'`\n      )\n    }\n\n    return enhancer(createStore)(\n      reducer,\n      preloadedState as PreloadedState | undefined\n    )\n  }\n\n  let currentReducer = reducer\n  let currentState: S | PreloadedState | undefined = preloadedState as\n    | PreloadedState\n    | undefined\n  let currentListeners: Map<number, ListenerCallback> | null = new Map()\n  let nextListeners = currentListeners\n  let listenerIdCounter = 0\n  let isDispatching = false\n\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = new Map()\n      currentListeners.forEach((listener, key) => {\n        nextListeners.set(key, listener)\n      })\n    }\n  }\n\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns The current state tree of your application.\n   */\n  function getState(): S {\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.getState() while the reducer is executing. ' +\n          'The reducer has already received the state as an argument. ' +\n          'Pass it down from the top reducer instead of reading it from the store.'\n      )\n    }\n\n    return currentState as S\n  }\n\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param listener A callback to be invoked on every dispatch.\n   * @returns A function to remove this change listener.\n   */\n  function subscribe(listener: () => void) {\n    if (typeof listener !== 'function') {\n      throw new Error(\n        `Expected the listener to be a function. Instead, received: '${kindOf(\n          listener\n        )}'`\n      )\n    }\n\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.subscribe() while the reducer is executing. ' +\n          'If you would like to be notified after the store has been updated, subscribe from a ' +\n          'component and invoke store.getState() in the callback to access the latest state. ' +\n          'See https://redux.js.org/api/store#subscribelistener for more details.'\n      )\n    }\n\n    let isSubscribed = true\n\n    ensureCanMutateNextListeners()\n    const listenerId = listenerIdCounter++\n    nextListeners.set(listenerId, listener)\n\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return\n      }\n\n      if (isDispatching) {\n        throw new Error(\n          'You may not unsubscribe from a store listener while the reducer is executing. ' +\n            'See https://redux.js.org/api/store#subscribelistener for more details.'\n        )\n      }\n\n      isSubscribed = false\n\n      ensureCanMutateNextListeners()\n      nextListeners.delete(listenerId)\n      currentListeners = null\n    }\n  }\n\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n  function dispatch(action: A) {\n    if (!isPlainObject(action)) {\n      throw new Error(\n        `Actions must be plain objects. Instead, the actual type was: '${kindOf(\n          action\n        )}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`\n      )\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error(\n        'Actions may not have an undefined \"type\" property. You may have misspelled an action type string constant.'\n      )\n    }\n\n    if (typeof action.type !== 'string') {\n      throw new Error(\n        `Action \"type\" property must be a string. Instead, the actual type was: '${kindOf(\n          action.type\n        )}'. Value was: '${action.type}' (stringified)`\n      )\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.')\n    }\n\n    try {\n      isDispatching = true\n      currentState = currentReducer(currentState, action)\n    } finally {\n      isDispatching = false\n    }\n\n    const listeners = (currentListeners = nextListeners)\n    listeners.forEach(listener => {\n      listener()\n    })\n    return action\n  }\n\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param nextReducer The reducer for the store to use instead.\n   */\n  function replaceReducer(nextReducer: Reducer<S, A>): void {\n    if (typeof nextReducer !== 'function') {\n      throw new Error(\n        `Expected the nextReducer to be a function. Instead, received: '${kindOf(\n          nextReducer\n        )}`\n      )\n    }\n\n    currentReducer = nextReducer as unknown as Reducer<S, A, PreloadedState>\n\n    // This action has a similar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n    dispatch({ type: ActionTypes.REPLACE } as A)\n  }\n\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n  function observable() {\n    const outerSubscribe = subscribe\n    return {\n      /**\n       * The minimal observable subscription method.\n       * @param observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe(observer: unknown) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError(\n            `Expected the observer to be an object. Instead, received: '${kindOf(\n              observer\n            )}'`\n          )\n        }\n\n        function observeState() {\n          const observerAsObserver = observer as Observer<S>\n          if (observerAsObserver.next) {\n            observerAsObserver.next(getState())\n          }\n        }\n\n        observeState()\n        const unsubscribe = outerSubscribe(observeState)\n        return { unsubscribe }\n      },\n\n      [$$observable]() {\n        return this\n      }\n    }\n  }\n\n  // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n  dispatch({ type: ActionTypes.INIT } as A)\n\n  const store = {\n    dispatch: dispatch as Dispatch<A>,\n    subscribe,\n    getState,\n    replaceReducer,\n    [$$observable]: observable\n  } as unknown as Store<S, A, StateExt> & Ext\n  return store\n}\n\n/**\n * Creates a Redux store that holds the state tree.\n *\n * **We recommend using `configureStore` from the\n * `@reduxjs/toolkit` package**, which replaces `createStore`:\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\nexport function legacy_createStore<\n  S,\n  A extends Action,\n  Ext extends {} = {},\n  StateExt extends {} = {}\n>(\n  reducer: Reducer<S, A>,\n  enhancer?: StoreEnhancer<Ext, StateExt>\n): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext\n/**\n * Creates a Redux store that holds the state tree.\n *\n * **We recommend using `configureStore` from the\n * `@reduxjs/toolkit` package**, which replaces `createStore`:\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\nexport function legacy_createStore<\n  S,\n  A extends Action,\n  Ext extends {} = {},\n  StateExt extends {} = {},\n  PreloadedState = S\n>(\n  reducer: Reducer<S, A, PreloadedState>,\n  preloadedState?: PreloadedState | undefined,\n  enhancer?: StoreEnhancer<Ext, StateExt>\n): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext\nexport function legacy_createStore<\n  S,\n  A extends Action,\n  Ext extends {} = {},\n  StateExt extends {} = {},\n  PreloadedState = S\n>(\n  reducer: Reducer<S, A>,\n  preloadedState?: PreloadedState | StoreEnhancer<Ext, StateExt> | undefined,\n  enhancer?: StoreEnhancer<Ext, StateExt>\n): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext {\n  return createStore(reducer, preloadedState as any, enhancer)\n}\n","// functions\nimport { createStore, legacy_createStore } from './createStore'\nimport combineReducers from './combineReducers'\nimport bindActionCreators from './bindActionCreators'\nimport applyMiddleware from './applyMiddleware'\nimport compose from './compose'\nimport isAction from './utils/isAction'\nimport isPlainObject from './utils/isPlainObject'\nimport __DO_NOT_USE__ActionTypes from './utils/actionTypes'\n\n// types\n// store\nexport type {\n  Dispatch,\n  Unsubscribe,\n  Observable,\n  Observer,\n  Store,\n  StoreCreator,\n  StoreEnhancer,\n  StoreEnhancerStoreCreator\n} from './types/store'\n// reducers\nexport {\n  Reducer,\n  ReducersMapObject,\n  StateFromReducersMapObject,\n  ReducerFromReducersMapObject,\n  ActionFromReducer,\n  ActionFromReducersMapObject,\n  PreloadedStateShapeFromReducersMapObject\n} from './types/reducers'\n// action creators\nexport { ActionCreator, ActionCreatorsMapObject } from './types/actions'\n// middleware\nexport { MiddlewareAPI, Middleware } from './types/middleware'\n// actions\nexport { Action, UnknownAction, AnyAction } from './types/actions'\n\nexport {\n  createStore,\n  legacy_createStore,\n  combineReducers,\n  bindActionCreators,\n  applyMiddleware,\n  compose,\n  isAction,\n  isPlainObject,\n  __DO_NOT_USE__ActionTypes\n}\n","/**\n * An *action* is a plain object that represents an intention to change the\n * state. Actions are the only way to get data into the store. Any data,\n * whether from UI events, network callbacks, or other sources such as\n * WebSockets needs to eventually be dispatched as actions.\n *\n * Actions must have a `type` field that indicates the type of action being\n * performed. Types can be defined as constants and imported from another\n * module. These must be strings, as strings are serializable.\n *\n * Other than `type`, the structure of an action object is really up to you.\n * If you're interested, check out Flux Standard Action for recommendations on\n * how actions should be constructed.\n *\n * @template T the type of the action's `type` tag.\n */\n// this needs to be a type, not an interface\n// https://github.com/microsoft/TypeScript/issues/15300\nexport type Action<T extends string = string> = {\n  type: T\n}\n\n/**\n * An Action type which accepts any other properties.\n * This is mainly for the use of the `Reducer` type.\n * This is not part of `Action` itself to prevent types that extend `Action` from\n * having an index signature.\n */\nexport interface UnknownAction extends Action {\n  // Allows any extra properties to be defined in an action.\n  [extraProps: string]: unknown\n}\n\n/**\n * An Action type which accepts any other properties.\n * This is mainly for the use of the `Reducer` type.\n * This is not part of `Action` itself to prevent types that extend `Action` from\n * having an index signature.\n * @deprecated use Action or UnknownAction instead\n */\nexport interface AnyAction extends Action {\n  // Allows any extra properties to be defined in an action.\n  [extraProps: string]: any\n}\n\n/* action creators */\n\n/**\n * An *action creator* is, quite simply, a function that creates an action. Do\n * not confuse the two terms—again, an action is a payload of information, and\n * an action creator is a factory that creates an action.\n *\n * Calling an action creator only produces an action, but does not dispatch\n * it. You need to call the store's `dispatch` function to actually cause the\n * mutation. Sometimes we say *bound action creators* to mean functions that\n * call an action creator and immediately dispatch its result to a specific\n * store instance.\n *\n * If an action creator needs to read the current state, perform an API call,\n * or cause a side effect, like a routing transition, it should return an\n * async action instead of an action.\n *\n * @template A Returned action type.\n */\nexport interface ActionCreator<A, P extends any[] = any[]> {\n  (...args: P): A\n}\n\n/**\n * Object whose values are action creator functions.\n */\nexport interface ActionCreatorsMapObject<A = any, P extends any[] = any[]> {\n  [key: string]: ActionCreator<A, P>\n}\n","import type { Dispatch } from './store'\n\nexport interface MiddlewareAPI<D extends Dispatch = Dispatch, S = any> {\n  dispatch: D\n  getState(): S\n}\n\n/**\n * A middleware is a higher-order function that composes a dispatch function\n * to return a new dispatch function. It often turns async actions into\n * actions.\n *\n * Middleware is composable using function composition. It is useful for\n * logging actions, performing side effects like routing, or turning an\n * asynchronous API call into a series of synchronous actions.\n *\n * @template DispatchExt Extra Dispatch signature added by this middleware.\n * @template S The type of the state supported by this middleware.\n * @template D The type of Dispatch of the store where this middleware is\n *   installed.\n */\nexport interface Middleware<\n  _DispatchExt = {}, // TODO: see if this can be used in type definition somehow (can't be removed, as is used to get final dispatch type)\n  S = any,\n  D extends Dispatch = Dispatch\n> {\n  (api: MiddlewareAPI<D, S>): (\n    next: (action: unknown) => unknown\n  ) => (action: unknown) => unknown\n}\n","import type { Action, UnknownAction } from './actions'\n\n/* reducers */\n\n/**\n * A *reducer* is a function that accepts\n * an accumulation and a value and returns a new accumulation. They are used\n * to reduce a collection of values down to a single value\n *\n * Reducers are not unique to Redux—they are a fundamental concept in\n * functional programming.  Even most non-functional languages, like\n * JavaScript, have a built-in API for reducing. In JavaScript, it's\n * `Array.prototype.reduce()`.\n *\n * In Redux, the accumulated value is the state object, and the values being\n * accumulated are actions. Reducers calculate a new state given the previous\n * state and an action. They must be *pure functions*—functions that return\n * the exact same output for given inputs. They should also be free of\n * side-effects. This is what enables exciting features like hot reloading and\n * time travel.\n *\n * Reducers are the most important concept in Redux.\n *\n * *Do not put API calls into reducers.*\n *\n * @template S The type of state consumed and produced by this reducer.\n * @template A The type of actions the reducer can potentially respond to.\n * @template PreloadedState The type of state consumed by this reducer the first time it's called.\n */\nexport type Reducer<\n  S = any,\n  A extends Action = UnknownAction,\n  PreloadedState = S\n> = (state: S | PreloadedState | undefined, action: A) => S\n\n/**\n * Object whose values correspond to different reducer functions.\n *\n * @template S The combined state of the reducers.\n * @template A The type of actions the reducers can potentially respond to.\n * @template PreloadedState The combined preloaded state of the reducers.\n */\nexport type ReducersMapObject<\n  S = any,\n  A extends Action = UnknownAction,\n  PreloadedState = S\n> = keyof PreloadedState extends keyof S\n  ? {\n      [K in keyof S]: Reducer<\n        S[K],\n        A,\n        K extends keyof PreloadedState ? PreloadedState[K] : never\n      >\n    }\n  : never\n\n/**\n * Infer a combined state shape from a `ReducersMapObject`.\n *\n * @template M Object map of reducers as provided to `combineReducers(map: M)`.\n */\nexport type StateFromReducersMapObject<M> = M[keyof M] extends\n  | Reducer<any, any, any>\n  | undefined\n  ? {\n      [P in keyof M]: M[P] extends Reducer<infer S, any, any> ? S : never\n    }\n  : never\n\n/**\n * Infer reducer union type from a `ReducersMapObject`.\n *\n * @template M Object map of reducers as provided to `combineReducers(map: M)`.\n */\nexport type ReducerFromReducersMapObject<M> = M[keyof M] extends\n  | Reducer<any, any, any>\n  | undefined\n  ? M[keyof M]\n  : never\n\n/**\n * Infer action type from a reducer function.\n *\n * @template R Type of reducer.\n */\nexport type ActionFromReducer<R> = R extends Reducer<any, infer A, any>\n  ? A\n  : never\n\n/**\n * Infer action union type from a `ReducersMapObject`.\n *\n * @template M Object map of reducers as provided to `combineReducers(map: M)`.\n */\nexport type ActionFromReducersMapObject<M> = ActionFromReducer<\n  ReducerFromReducersMapObject<M>\n>\n\n/**\n * Infer a combined preloaded state shape from a `ReducersMapObject`.\n *\n * @template M Object map of reducers as provided to `combineReducers(map: M)`.\n */\nexport type PreloadedStateShapeFromReducersMapObject<M> = M[keyof M] extends\n  | Reducer<any, any, any>\n  | undefined\n  ? {\n      [P in keyof M]: M[P] extends (\n        inputState: infer InputState,\n        action: UnknownAction\n      ) => any\n        ? InputState\n        : never\n    }\n  : never\n","/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\n\nconst randomString = () =>\n  Math.random().toString(36).substring(7).split('').join('.')\n\nconst ActionTypes = {\n  INIT: `@@redux/INIT${/* #__PURE__ */ randomString()}`,\n  REPLACE: `@@redux/REPLACE${/* #__PURE__ */ randomString()}`,\n  PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`\n}\n\nexport default ActionTypes\n","import type { Action } from '../types/actions'\nimport isPlainObject from './isPlainObject'\n\nexport default function isAction(action: unknown): action is Action<string> {\n  return (\n    isPlainObject(action) &&\n    'type' in action &&\n    typeof (action as Record<'type', unknown>).type === 'string'\n  )\n}\n","/**\n * @param obj The object to inspect.\n * @returns True if the argument appears to be a plain object.\n */\nexport default function isPlainObject(obj: any): obj is object {\n  if (typeof obj !== 'object' || obj === null) return false\n\n  let proto = obj\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto)\n  }\n\n  return (\n    Object.getPrototypeOf(obj) === proto || Object.getPrototypeOf(obj) === null\n  )\n}\n","// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of\nexport function miniKindOf(val: any): string {\n  if (val === void 0) return 'undefined'\n  if (val === null) return 'null'\n\n  const type = typeof val\n  switch (type) {\n    case 'boolean':\n    case 'string':\n    case 'number':\n    case 'symbol':\n    case 'function': {\n      return type\n    }\n  }\n\n  if (Array.isArray(val)) return 'array'\n  if (isDate(val)) return 'date'\n  if (isError(val)) return 'error'\n\n  const constructorName = ctorName(val)\n  switch (constructorName) {\n    case 'Symbol':\n    case 'Promise':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Map':\n    case 'Set':\n      return constructorName\n  }\n\n  // other\n  return Object.prototype.toString\n    .call(val)\n    .slice(8, -1)\n    .toLowerCase()\n    .replace(/\\s/g, '')\n}\n\nfunction ctorName(val: any): string | null {\n  return typeof val.constructor === 'function' ? val.constructor.name : null\n}\n\nfunction isError(val: any) {\n  return (\n    val instanceof Error ||\n    (typeof val.message === 'string' &&\n      val.constructor &&\n      typeof val.constructor.stackTraceLimit === 'number')\n  )\n}\n\nfunction isDate(val: any) {\n  if (val instanceof Date) return true\n  return (\n    typeof val.toDateString === 'function' &&\n    typeof val.getDate === 'function' &&\n    typeof val.setDate === 'function'\n  )\n}\n\nexport function kindOf(val: any) {\n  let typeOfVal: string = typeof val\n\n  if (process.env.NODE_ENV !== 'production') {\n    typeOfVal = miniKindOf(val)\n  }\n\n  return typeOfVal\n}\n","declare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\nconst $$observable = /* #__PURE__ */ (() =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n\nexport default $$observable\n"],"names":[],"mappings":"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"}