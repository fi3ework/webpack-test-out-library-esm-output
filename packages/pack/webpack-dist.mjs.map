{"version":3,"file":"webpack-dist.mjs","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;SAAA;SACA;;SAEA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;;SAEA;SACA;;SAEA;SACA;SACA;;;;;UCtBA;UACA;UACA;UACA;UACA,yCAAyC,wCAAwC;UACjF;UACA;UACA;;;;;UCPA;;;;;UCAA;UACA;UACA;UACA,uDAAuD,iBAAiB;UACxE;UACA,gDAAgD,aAAa;UAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA,MAAM,eAAgC,uBACnC,OAAO,WAAW,cAAc,OAAO,cAAe,gBAAgB;AAEzE,wDAAe,YAAY;;;;ACF3B,MAAM,eAAe,MACnB,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,CAAC,EAAE,MAAM,EAAE,EAAE,KAAK,GAAG;AAE5D,MAAM,cAAc;AAAA,EAClB,MAAM,eAA+B,6BAAa,CAAC;AAAA,EACnD,SAAS,kBAAkC,6BAAa,CAAC;AAAA,EACzD,sBAAsB,MAAM,+BAA+B,aAAa,CAAC;AAC3E;AAEA,kDAAe,WAAW;;;;ACZX,SAAS,cAAc,KAAyB;AAC7D,MAAI,OAAO,QAAQ,YAAY,QAAQ;AAAM,WAAO;AAEpD,MAAI,QAAQ;AACZ,SAAO,OAAO,eAAe,KAAK,MAAM,MAAM;AAC5C,YAAQ,OAAO,eAAe,KAAK;AAAA,EACrC;AAEA,SACE,OAAO,eAAe,GAAG,MAAM,SAAS,OAAO,eAAe,GAAG,MAAM;AAE3E;;;;ACdO,SAAS,WAAW,KAAkB;AAC3C,MAAI,QAAQ;AAAQ,WAAO;AAC3B,MAAI,QAAQ;AAAM,WAAO;AAEzB,QAAM,OAAO,OAAO;AACpB,UAAQ,MAAM;AAAA,IACZ,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK,YAAY;AACf,aAAO;AAAA,IACT;AAAA,EACF;AAEA,MAAI,MAAM,QAAQ,GAAG;AAAG,WAAO;AAC/B,MAAI,OAAO,GAAG;AAAG,WAAO;AACxB,MAAI,QAAQ,GAAG;AAAG,WAAO;AAEzB,QAAM,kBAAkB,SAAS,GAAG;AACpC,UAAQ,iBAAiB;AAAA,IACvB,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,EACX;AAGA,SAAO,OAAO,UAAU,SACrB,KAAK,GAAG,EACR,MAAM,GAAG,EAAE,EACX,YAAY,EACZ,QAAQ,OAAO,EAAE;AACtB;AAEA,SAAS,SAAS,KAAyB;AACzC,SAAO,OAAO,IAAI,gBAAgB,aAAa,IAAI,YAAY,OAAO;AACxE;AAEA,SAAS,QAAQ,KAAU;AACzB,SACE,eAAe,SACd,OAAO,IAAI,YAAY,YACtB,IAAI,eACJ,OAAO,IAAI,YAAY,oBAAoB;AAEjD;AAEA,SAAS,OAAO,KAAU;AACxB,MAAI,eAAe;AAAM,WAAO;AAChC,SACE,OAAO,IAAI,iBAAiB,cAC5B,OAAO,IAAI,YAAY,cACvB,OAAO,IAAI,YAAY;AAE3B;AAEO,SAAS,OAAO,KAAU;AAC/B,MAAI,YAAoB,OAAO;AAE/B,MAAI,QAAQ,IAAI,aAAa,cAAc;AACzC,gBAAY,WAAW,GAAG;AAAA,EAC5B;AAEA,SAAO;AACT;;;;ACrEyB;AAYD;AACE;AACH;AAwEhB,SAAS,YAOd,SACA,gBACA,UACmD;AACnD,MAAI,OAAO,YAAY,YAAY;AACjC,UAAM,IAAI;AAAA,MACR,mEAAmE,MAAM;AAAN,QACjE;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAEA,MACG,OAAO,mBAAmB,cAAc,OAAO,aAAa,cAC5D,OAAO,aAAa,cAAc,OAAO,UAAU,CAAC,MAAM,YAC3D;AACA,UAAM,IAAI;AAAA,MACR;AAAA,IAGF;AAAA,EACF;AAEA,MAAI,OAAO,mBAAmB,cAAc,OAAO,aAAa,aAAa;AAC3E,eAAW;AACX,qBAAiB;AAAA,EACnB;AAEA,MAAI,OAAO,aAAa,aAAa;AACnC,QAAI,OAAO,aAAa,YAAY;AAClC,YAAM,IAAI;AAAA,QACR,+DAA+D,MAAM;AAAN,UAC7D;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,WAAO,SAAS,WAAW;AAAA,MACzB;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAEA,MAAI,iBAAiB;AACrB,MAAI,eAA+C;AAGnD,MAAI,mBAAyD,oBAAI,IAAI;AACrE,MAAI,gBAAgB;AACpB,MAAI,oBAAoB;AACxB,MAAI,gBAAgB;AASpB,WAAS,+BAA+B;AACtC,QAAI,kBAAkB,kBAAkB;AACtC,sBAAgB,oBAAI,IAAI;AACxB,uBAAiB,QAAQ,CAAC,UAAU,QAAQ;AAC1C,sBAAc,IAAI,KAAK,QAAQ;AAAA,MACjC,CAAC;AAAA,IACH;AAAA,EACF;AAOA,WAAS,WAAc;AACrB,QAAI,eAAe;AACjB,YAAM,IAAI;AAAA,QACR;AAAA,MAGF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAyBA,WAAS,UAAU,UAAsB;AACvC,QAAI,OAAO,aAAa,YAAY;AAClC,YAAM,IAAI;AAAA,QACR,+DAA+D,MAAM;AAAN,UAC7D;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,QAAI,eAAe;AACjB,YAAM,IAAI;AAAA,QACR;AAAA,MAIF;AAAA,IACF;AAEA,QAAI,eAAe;AAEnB,iCAA6B;AAC7B,UAAM,aAAa;AACnB,kBAAc,IAAI,YAAY,QAAQ;AAEtC,WAAO,SAAS,cAAc;AAC5B,UAAI,CAAC,cAAc;AACjB;AAAA,MACF;AAEA,UAAI,eAAe;AACjB,cAAM,IAAI;AAAA,UACR;AAAA,QAEF;AAAA,MACF;AAEA,qBAAe;AAEf,mCAA6B;AAC7B,oBAAc,OAAO,UAAU;AAC/B,yBAAmB;AAAA,IACrB;AAAA,EACF;AA2BA,WAAS,SAAS,QAAW;AAC3B,QAAI,CAAC,aAAa,CAAC,MAAM,GAAG;AAC1B,YAAM,IAAI;AAAA,QACR,iEAAiE,MAAM;AAAN,UAC/D;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,QAAI,OAAO,OAAO,SAAS,aAAa;AACtC,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,OAAO,OAAO,SAAS,UAAU;AACnC,YAAM,IAAI;AAAA,QACR,2EAA2E,MAAM;AAAN,UACzE,OAAO;AAAA,QACT,CAAC,kBAAkB,OAAO,IAAI;AAAA,MAChC;AAAA,IACF;AAEA,QAAI,eAAe;AACjB,YAAM,IAAI,MAAM,oCAAoC;AAAA,IACtD;AAEA,QAAI;AACF,sBAAgB;AAChB,qBAAe,eAAe,cAAc,MAAM;AAAA,IACpD,UAAE;AACA,sBAAgB;AAAA,IAClB;AAEA,UAAM,YAAa,mBAAmB;AACtC,cAAU,QAAQ,cAAY;AAC5B,eAAS;AAAA,IACX,CAAC;AACD,WAAO;AAAA,EACT;AAWA,WAAS,eAAe,aAAkC;AACxD,QAAI,OAAO,gBAAgB,YAAY;AACrC,YAAM,IAAI;AAAA,QACR,kEAAkE,MAAM;AAAN,UAChE;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,qBAAiB;AAMjB,aAAS,EAAE,MAAM,WAAW,CAAC,QAAQ,CAAM;AAAA,EAC7C;AAQA,WAAS,aAAa;AACpB,UAAM,iBAAiB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASL,UAAU,UAAmB;AAC3B,YAAI,OAAO,aAAa,YAAY,aAAa,MAAM;AACrD,gBAAM,IAAI;AAAA,YACR,8DAA8D,MAAM;AAAN,cAC5D;AAAA,YACF,CAAC;AAAA,UACH;AAAA,QACF;AAEA,iBAAS,eAAe;AACtB,gBAAM,qBAAqB;AAC3B,cAAI,mBAAmB,MAAM;AAC3B,+BAAmB,KAAK,SAAS,CAAC;AAAA,UACpC;AAAA,QACF;AAEA,qBAAa;AACb,cAAM,cAAc,eAAe,YAAY;AAC/C,eAAO,EAAE,YAAY;AAAA,MACvB;AAAA,MAEA,CAAC,iBAAY,IAAI;AACf,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAKA,WAAS,EAAE,MAAM,WAAW,CAAC,KAAK,CAAM;AAExC,QAAM,QAAQ;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,CAAC,iBAAY,GAAG;AAAA,EAClB;AACA,SAAO;AACT;AAkFO,SAAS,mBAOd,SACA,gBACA,UACmD;AACnD,SAAO,YAAY,SAAS,gBAAuB,QAAQ;AAC7D;;;;ACpee,SAAS,QAAQ,SAAuB;AAErD,MAAI,OAAO,YAAY,eAAe,OAAO,QAAQ,UAAU,YAAY;AACzE,YAAQ,MAAM,OAAO;AAAA,EACvB;AAEA,MAAI;AAIF,UAAM,IAAI,MAAM,OAAO;AAAA,EACzB,SAAS,GAAG;AAAA,EAAC;AACf;;;;ACTwB;AACE;AACN;AACG;AAEvB,SAAS,sCACP,YACA,UACA,QACA,oBACA;AACA,QAAM,cAAc,OAAO,KAAK,QAAQ;AACxC,QAAM,eACJ,UAAU,OAAO,SAAS,WAAW,CAAC,OAClC,kDACA;AAEN,MAAI,YAAY,WAAW,GAAG;AAC5B,WACE;AAAA,EAGJ;AAEA,MAAI,CAAC,aAAa,CAAC,UAAU,GAAG;AAC9B,WACE,OAAO,YAAY,4BAA4B,MAAM;AAAN,MAC7C;AAAA,IACF,CAAC,kEACS,YAAY,KAAK,MAAM,CAAC;AAAA,EAEtC;AAEA,QAAM,iBAAiB,OAAO,KAAK,UAAU,EAAE;AAAA,IAC7C,SAAO,CAAC,SAAS,eAAe,GAAG,KAAK,CAAC,mBAAmB,GAAG;AAAA,EACjE;AAEA,iBAAe,QAAQ,SAAO;AAC5B,uBAAmB,GAAG,IAAI;AAAA,EAC5B,CAAC;AAED,MAAI,UAAU,OAAO,SAAS,WAAW,CAAC;AAAS;AAEnD,MAAI,eAAe,SAAS,GAAG;AAC7B,WACE,cAAc,eAAe,SAAS,IAAI,SAAS,KAAK,KACpD,eAAe,KAAK,MAAM,CAAC,cAAc,YAAY,8DAErD,YAAY,KAAK,MAAM,CAAC;AAAA,EAEhC;AACF;AAEA,SAAS,mBAAmB,UAEzB;AACD,SAAO,KAAK,QAAQ,EAAE,QAAQ,SAAO;AACnC,UAAM,UAAU,SAAS,GAAG;AAC5B,UAAM,eAAe,QAAQ,QAAW,EAAE,MAAM,WAAW,CAAC,KAAK,CAAC;AAElE,QAAI,OAAO,iBAAiB,aAAa;AACvC,YAAM,IAAI;AAAA,QACR,8BAA8B,GAAG;AAAA,MAKnC;AAAA,IACF;AAEA,QACE,OAAO,QAAQ,QAAW;AAAA,MACxB,MAAM,WAAW,CAAC,qBAAqB;AAAA,IACzC,CAAC,MAAM,aACP;AACA,YAAM,IAAI;AAAA,QACR,8BAA8B,GAAG,6EACP,WAAW,CAAC,IAAI;AAAA,MAK5C;AAAA,IACF;AAAA,EACF,CAAC;AACH;AA6Be,SAAS,gBAAgB,UAErC;AACD,QAAM,cAAc,OAAO,KAAK,QAAQ;AACxC,QAAM,gBAA2D,CAAC;AAClE,WAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AAC3C,UAAM,MAAM,YAAY,CAAC;AAEzB,QAAI,QAAQ,IAAI,aAAa,cAAc;AACzC,UAAI,OAAO,SAAS,GAAG,MAAM,aAAa;AACxC,eAAO,CAAC,gCAAgC,GAAG,GAAG;AAAA,MAChD;AAAA,IACF;AAEA,QAAI,OAAO,SAAS,GAAG,MAAM,YAAY;AACvC,oBAAc,GAAG,IAAI,SAAS,GAAG;AAAA,IACnC;AAAA,EACF;AACA,QAAM,mBAAmB,OAAO,KAAK,aAAa;AAIlD,MAAI;AACJ,MAAI,QAAQ,IAAI,aAAa,cAAc;AACzC,yBAAqB,CAAC;AAAA,EACxB;AAEA,MAAI;AACJ,MAAI;AACF,uBAAmB,aAAa;AAAA,EAClC,SAAS,GAAG;AACV,0BAAsB;AAAA,EACxB;AAEA,SAAO,SAAS,YACd,QAAqD,CAAC,GACtD,QACA;AACA,QAAI,qBAAqB;AACvB,YAAM;AAAA,IACR;AAEA,QAAI,QAAQ,IAAI,aAAa,cAAc;AACzC,YAAM,iBAAiB;AAAA,QACrB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,UAAI,gBAAgB;AAClB,eAAO,CAAC,cAAc;AAAA,MACxB;AAAA,IACF;AAEA,QAAI,aAAa;AACjB,UAAM,YAAyD,CAAC;AAChE,aAAS,IAAI,GAAG,IAAI,iBAAiB,QAAQ,KAAK;AAChD,YAAM,MAAM,iBAAiB,CAAC;AAC9B,YAAM,UAAU,cAAc,GAAG;AACjC,YAAM,sBAAsB,MAAM,GAAG;AACrC,YAAM,kBAAkB,QAAQ,qBAAqB,MAAM;AAC3D,UAAI,OAAO,oBAAoB,aAAa;AAC1C,cAAM,aAAa,UAAU,OAAO;AACpC,cAAM,IAAI;AAAA,UACR,sCACE,aAAa,IAAI,OAAO,UAAU,CAAC,MAAM,gBAC3C,gCAAgC,GAAG;AAAA,QAGrC;AAAA,MACF;AACA,gBAAU,GAAG,IAAI;AACjB,mBAAa,cAAc,oBAAoB;AAAA,IACjD;AACA,iBACE,cAAc,iBAAiB,WAAW,OAAO,KAAK,KAAK,EAAE;AAC/D,WAAO,aAAa,YAAY;AAAA,EAClC;AACF;;;;ACtMuB;AAEvB,SAAS,kBACP,eACA,UACA;AACA,SAAO,YAAwB,MAAa;AAC1C,WAAO,SAAS,cAAc,MAAM,MAAM,IAAI,CAAC;AAAA,EACjD;AACF;AA0Ce,SAAS,mBACtB,gBACA,UACA;AACA,MAAI,OAAO,mBAAmB,YAAY;AACxC,WAAO,kBAAkB,gBAAgB,QAAQ;AAAA,EACnD;AAEA,MAAI,OAAO,mBAAmB,YAAY,mBAAmB,MAAM;AACjE,UAAM,IAAI;AAAA,MACR,+EAA+E,MAAM;AAAN,QAC7E;AAAA,MACF,CAAC;AAAA,IAEH;AAAA,EACF;AAEA,QAAM,sBAA+C,CAAC;AACtD,aAAW,OAAO,gBAAgB;AAChC,UAAM,gBAAgB,eAAe,GAAG;AACxC,QAAI,OAAO,kBAAkB,YAAY;AACvC,0BAAoB,GAAG,IAAI,kBAAkB,eAAe,QAAQ;AAAA,IACtE;AAAA,EACF;AACA,SAAO;AACT;;;;ACjCe,SAAS,WAAW,OAAmB;AACpD,MAAI,MAAM,WAAW,GAAG;AAEtB,WAAO,CAAI,QAAW;AAAA,EACxB;AAEA,MAAI,MAAM,WAAW,GAAG;AACtB,WAAO,MAAM,CAAC;AAAA,EAChB;AAEA,SAAO,MAAM;AAAA,IACX,CAAC,GAAG,MACF,IAAI,SACF,EAAE,EAAE,GAAG,IAAI,CAAC;AAAA,EAClB;AACF;;;;;;;;;;;;;;;;;;;;;;;AC5DoB;AAoDL,SAAS,mBACnB,aACiB;AACpB,SAAO,iBAAe,CAAC,SAAS,mBAAmB;AACjD,UAAM,QAAQ,YAAY,SAAS,cAAc;AACjD,QAAI,WAAqB,MAAM;AAC7B,YAAM,IAAI;AAAA,QACR;AAAA,MAEF;AAAA,IACF;AAEA,UAAM,gBAA+B;AAAA,MACnC,UAAU,MAAM;AAAA,MAChB,UAAU,CAAC,WAAW,SAAS,SAAS,QAAQ,GAAG,IAAI;AAAA,IACzD;AACA,UAAM,QAAQ,YAAY,IAAI,gBAAc,WAAW,aAAa,CAAC;AACrE,eAAW,OAAO,CAAkB,GAAG,KAAK,EAAE,MAAM,QAAQ;AAE5D,WAAO,iCACF,QADE;AAAA,MAEL;AAAA,IACF;AAAA,EACF;AACF;;;;AC3E0B;AAEX,SAAS,SAAS,QAA2C;AAC1E,SACE,aAAa,CAAC,MAAM,KACpB,UAAU,UACV,OAAQ,OAAmC,SAAS;AAExD;;;;;;;;;;ACRgD;AACpB;AACG;AACH;AACR;AACC;AACK;AACY;AAuB/B;AAEgD;AAEb;AAEO;AAW/C","sources":["webpack://@monorepo/pack/webpack/bootstrap","webpack://@monorepo/pack/webpack/runtime/define property getters","webpack://@monorepo/pack/webpack/runtime/hasOwnProperty shorthand","webpack://@monorepo/pack/webpack/runtime/make namespace object","webpack://@monorepo/pack/../../submodules/redux/src/utils/symbol-observable.ts","webpack://@monorepo/pack/../../submodules/redux/src/utils/actionTypes.ts","webpack://@monorepo/pack/../../submodules/redux/src/utils/isPlainObject.ts","webpack://@monorepo/pack/../../submodules/redux/src/utils/kindOf.ts","webpack://@monorepo/pack/../../submodules/redux/src/createStore.ts","webpack://@monorepo/pack/../../submodules/redux/src/utils/warning.ts","webpack://@monorepo/pack/../../submodules/redux/src/combineReducers.ts","webpack://@monorepo/pack/../../submodules/redux/src/bindActionCreators.ts","webpack://@monorepo/pack/../../submodules/redux/src/compose.ts","webpack://@monorepo/pack/../../submodules/redux/src/applyMiddleware.ts","webpack://@monorepo/pack/../../submodules/redux/src/utils/isAction.ts","webpack://@monorepo/pack/../../submodules/redux/src/index.ts"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","declare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\nconst $$observable = /* #__PURE__ */ (() =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n\nexport default $$observable\n","/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\n\nconst randomString = () =>\n  Math.random().toString(36).substring(7).split('').join('.')\n\nconst ActionTypes = {\n  INIT: `@@redux/INIT${/* #__PURE__ */ randomString()}`,\n  REPLACE: `@@redux/REPLACE${/* #__PURE__ */ randomString()}`,\n  PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`\n}\n\nexport default ActionTypes\n","/**\n * @param obj The object to inspect.\n * @returns True if the argument appears to be a plain object.\n */\nexport default function isPlainObject(obj: any): obj is object {\n  if (typeof obj !== 'object' || obj === null) return false\n\n  let proto = obj\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto)\n  }\n\n  return (\n    Object.getPrototypeOf(obj) === proto || Object.getPrototypeOf(obj) === null\n  )\n}\n","// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of\nexport function miniKindOf(val: any): string {\n  if (val === void 0) return 'undefined'\n  if (val === null) return 'null'\n\n  const type = typeof val\n  switch (type) {\n    case 'boolean':\n    case 'string':\n    case 'number':\n    case 'symbol':\n    case 'function': {\n      return type\n    }\n  }\n\n  if (Array.isArray(val)) return 'array'\n  if (isDate(val)) return 'date'\n  if (isError(val)) return 'error'\n\n  const constructorName = ctorName(val)\n  switch (constructorName) {\n    case 'Symbol':\n    case 'Promise':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Map':\n    case 'Set':\n      return constructorName\n  }\n\n  // other\n  return Object.prototype.toString\n    .call(val)\n    .slice(8, -1)\n    .toLowerCase()\n    .replace(/\\s/g, '')\n}\n\nfunction ctorName(val: any): string | null {\n  return typeof val.constructor === 'function' ? val.constructor.name : null\n}\n\nfunction isError(val: any) {\n  return (\n    val instanceof Error ||\n    (typeof val.message === 'string' &&\n      val.constructor &&\n      typeof val.constructor.stackTraceLimit === 'number')\n  )\n}\n\nfunction isDate(val: any) {\n  if (val instanceof Date) return true\n  return (\n    typeof val.toDateString === 'function' &&\n    typeof val.getDate === 'function' &&\n    typeof val.setDate === 'function'\n  )\n}\n\nexport function kindOf(val: any) {\n  let typeOfVal: string = typeof val\n\n  if (process.env.NODE_ENV !== 'production') {\n    typeOfVal = miniKindOf(val)\n  }\n\n  return typeOfVal\n}\n","import $$observable from './utils/symbol-observable'\n\nimport type {\n  Store,\n  StoreEnhancer,\n  Dispatch,\n  Observer,\n  ListenerCallback,\n  UnknownIfNonSpecific\n} from './types/store'\nimport type { Action } from './types/actions'\nimport type { Reducer } from './types/reducers'\nimport ActionTypes from './utils/actionTypes'\nimport isPlainObject from './utils/isPlainObject'\nimport { kindOf } from './utils/kindOf'\n\n/**\n * @deprecated\n *\n * **We recommend using the `configureStore` method\n * of the `@reduxjs/toolkit` package**, which replaces `createStore`.\n *\n * Redux Toolkit is our recommended approach for writing Redux logic today,\n * including store setup, reducers, data fetching, and more.\n *\n * **For more details, please read this Redux docs page:**\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * `configureStore` from Redux Toolkit is an improved version of `createStore` that\n * simplifies setup and helps avoid common bugs.\n *\n * You should not be using the `redux` core package by itself today, except for learning purposes.\n * The `createStore` method from the core `redux` package will not be removed, but we encourage\n * all users to migrate to using Redux Toolkit for all Redux code.\n *\n * If you want to use `createStore` without this visual deprecation warning, use\n * the `legacy_createStore` import instead:\n *\n * `import { legacy_createStore as createStore} from 'redux'`\n *\n */\nexport function createStore<\n  S,\n  A extends Action,\n  Ext extends {} = {},\n  StateExt extends {} = {}\n>(\n  reducer: Reducer<S, A>,\n  enhancer?: StoreEnhancer<Ext, StateExt>\n): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext\n/**\n * @deprecated\n *\n * **We recommend using the `configureStore` method\n * of the `@reduxjs/toolkit` package**, which replaces `createStore`.\n *\n * Redux Toolkit is our recommended approach for writing Redux logic today,\n * including store setup, reducers, data fetching, and more.\n *\n * **For more details, please read this Redux docs page:**\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * `configureStore` from Redux Toolkit is an improved version of `createStore` that\n * simplifies setup and helps avoid common bugs.\n *\n * You should not be using the `redux` core package by itself today, except for learning purposes.\n * The `createStore` method from the core `redux` package will not be removed, but we encourage\n * all users to migrate to using Redux Toolkit for all Redux code.\n *\n * If you want to use `createStore` without this visual deprecation warning, use\n * the `legacy_createStore` import instead:\n *\n * `import { legacy_createStore as createStore} from 'redux'`\n *\n */\nexport function createStore<\n  S,\n  A extends Action,\n  Ext extends {} = {},\n  StateExt extends {} = {},\n  PreloadedState = S\n>(\n  reducer: Reducer<S, A, PreloadedState>,\n  preloadedState?: PreloadedState | undefined,\n  enhancer?: StoreEnhancer<Ext, StateExt>\n): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext\nexport function createStore<\n  S,\n  A extends Action,\n  Ext extends {} = {},\n  StateExt extends {} = {},\n  PreloadedState = S\n>(\n  reducer: Reducer<S, A, PreloadedState>,\n  preloadedState?: PreloadedState | StoreEnhancer<Ext, StateExt> | undefined,\n  enhancer?: StoreEnhancer<Ext, StateExt>\n): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext {\n  if (typeof reducer !== 'function') {\n    throw new Error(\n      `Expected the root reducer to be a function. Instead, received: '${kindOf(\n        reducer\n      )}'`\n    )\n  }\n\n  if (\n    (typeof preloadedState === 'function' && typeof enhancer === 'function') ||\n    (typeof enhancer === 'function' && typeof arguments[3] === 'function')\n  ) {\n    throw new Error(\n      'It looks like you are passing several store enhancers to ' +\n        'createStore(). This is not supported. Instead, compose them ' +\n        'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.'\n    )\n  }\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState as StoreEnhancer<Ext, StateExt>\n    preloadedState = undefined\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error(\n        `Expected the enhancer to be a function. Instead, received: '${kindOf(\n          enhancer\n        )}'`\n      )\n    }\n\n    return enhancer(createStore)(\n      reducer,\n      preloadedState as PreloadedState | undefined\n    )\n  }\n\n  let currentReducer = reducer\n  let currentState: S | PreloadedState | undefined = preloadedState as\n    | PreloadedState\n    | undefined\n  let currentListeners: Map<number, ListenerCallback> | null = new Map()\n  let nextListeners = currentListeners\n  let listenerIdCounter = 0\n  let isDispatching = false\n\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = new Map()\n      currentListeners.forEach((listener, key) => {\n        nextListeners.set(key, listener)\n      })\n    }\n  }\n\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns The current state tree of your application.\n   */\n  function getState(): S {\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.getState() while the reducer is executing. ' +\n          'The reducer has already received the state as an argument. ' +\n          'Pass it down from the top reducer instead of reading it from the store.'\n      )\n    }\n\n    return currentState as S\n  }\n\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param listener A callback to be invoked on every dispatch.\n   * @returns A function to remove this change listener.\n   */\n  function subscribe(listener: () => void) {\n    if (typeof listener !== 'function') {\n      throw new Error(\n        `Expected the listener to be a function. Instead, received: '${kindOf(\n          listener\n        )}'`\n      )\n    }\n\n    if (isDispatching) {\n      throw new Error(\n        'You may not call store.subscribe() while the reducer is executing. ' +\n          'If you would like to be notified after the store has been updated, subscribe from a ' +\n          'component and invoke store.getState() in the callback to access the latest state. ' +\n          'See https://redux.js.org/api/store#subscribelistener for more details.'\n      )\n    }\n\n    let isSubscribed = true\n\n    ensureCanMutateNextListeners()\n    const listenerId = listenerIdCounter++\n    nextListeners.set(listenerId, listener)\n\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return\n      }\n\n      if (isDispatching) {\n        throw new Error(\n          'You may not unsubscribe from a store listener while the reducer is executing. ' +\n            'See https://redux.js.org/api/store#subscribelistener for more details.'\n        )\n      }\n\n      isSubscribed = false\n\n      ensureCanMutateNextListeners()\n      nextListeners.delete(listenerId)\n      currentListeners = null\n    }\n  }\n\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n  function dispatch(action: A) {\n    if (!isPlainObject(action)) {\n      throw new Error(\n        `Actions must be plain objects. Instead, the actual type was: '${kindOf(\n          action\n        )}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`\n      )\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error(\n        'Actions may not have an undefined \"type\" property. You may have misspelled an action type string constant.'\n      )\n    }\n\n    if (typeof action.type !== 'string') {\n      throw new Error(\n        `Action \"type\" property must be a string. Instead, the actual type was: '${kindOf(\n          action.type\n        )}'. Value was: '${action.type}' (stringified)`\n      )\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.')\n    }\n\n    try {\n      isDispatching = true\n      currentState = currentReducer(currentState, action)\n    } finally {\n      isDispatching = false\n    }\n\n    const listeners = (currentListeners = nextListeners)\n    listeners.forEach(listener => {\n      listener()\n    })\n    return action\n  }\n\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param nextReducer The reducer for the store to use instead.\n   */\n  function replaceReducer(nextReducer: Reducer<S, A>): void {\n    if (typeof nextReducer !== 'function') {\n      throw new Error(\n        `Expected the nextReducer to be a function. Instead, received: '${kindOf(\n          nextReducer\n        )}`\n      )\n    }\n\n    currentReducer = nextReducer as unknown as Reducer<S, A, PreloadedState>\n\n    // This action has a similar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n    dispatch({ type: ActionTypes.REPLACE } as A)\n  }\n\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n  function observable() {\n    const outerSubscribe = subscribe\n    return {\n      /**\n       * The minimal observable subscription method.\n       * @param observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe(observer: unknown) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError(\n            `Expected the observer to be an object. Instead, received: '${kindOf(\n              observer\n            )}'`\n          )\n        }\n\n        function observeState() {\n          const observerAsObserver = observer as Observer<S>\n          if (observerAsObserver.next) {\n            observerAsObserver.next(getState())\n          }\n        }\n\n        observeState()\n        const unsubscribe = outerSubscribe(observeState)\n        return { unsubscribe }\n      },\n\n      [$$observable]() {\n        return this\n      }\n    }\n  }\n\n  // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n  dispatch({ type: ActionTypes.INIT } as A)\n\n  const store = {\n    dispatch: dispatch as Dispatch<A>,\n    subscribe,\n    getState,\n    replaceReducer,\n    [$$observable]: observable\n  } as unknown as Store<S, A, StateExt> & Ext\n  return store\n}\n\n/**\n * Creates a Redux store that holds the state tree.\n *\n * **We recommend using `configureStore` from the\n * `@reduxjs/toolkit` package**, which replaces `createStore`:\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\nexport function legacy_createStore<\n  S,\n  A extends Action,\n  Ext extends {} = {},\n  StateExt extends {} = {}\n>(\n  reducer: Reducer<S, A>,\n  enhancer?: StoreEnhancer<Ext, StateExt>\n): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext\n/**\n * Creates a Redux store that holds the state tree.\n *\n * **We recommend using `configureStore` from the\n * `@reduxjs/toolkit` package**, which replaces `createStore`:\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\nexport function legacy_createStore<\n  S,\n  A extends Action,\n  Ext extends {} = {},\n  StateExt extends {} = {},\n  PreloadedState = S\n>(\n  reducer: Reducer<S, A, PreloadedState>,\n  preloadedState?: PreloadedState | undefined,\n  enhancer?: StoreEnhancer<Ext, StateExt>\n): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext\nexport function legacy_createStore<\n  S,\n  A extends Action,\n  Ext extends {} = {},\n  StateExt extends {} = {},\n  PreloadedState = S\n>(\n  reducer: Reducer<S, A>,\n  preloadedState?: PreloadedState | StoreEnhancer<Ext, StateExt> | undefined,\n  enhancer?: StoreEnhancer<Ext, StateExt>\n): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext {\n  return createStore(reducer, preloadedState as any, enhancer)\n}\n","/**\n * Prints a warning in the console if it exists.\n *\n * @param message The warning message.\n */\nexport default function warning(message: string): void {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message)\n  }\n  /* eslint-enable no-console */\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message)\n  } catch (e) {} // eslint-disable-line no-empty\n}\n","import type { Action } from './types/actions'\nimport type {\n  ActionFromReducersMapObject,\n  PreloadedStateShapeFromReducersMapObject,\n  Reducer,\n  StateFromReducersMapObject\n} from './types/reducers'\n\nimport ActionTypes from './utils/actionTypes'\nimport isPlainObject from './utils/isPlainObject'\nimport warning from './utils/warning'\nimport { kindOf } from './utils/kindOf'\n\nfunction getUnexpectedStateShapeWarningMessage(\n  inputState: object,\n  reducers: { [key: string]: Reducer<any, any, any> },\n  action: Action,\n  unexpectedKeyCache: { [key: string]: true }\n) {\n  const reducerKeys = Object.keys(reducers)\n  const argumentName =\n    action && action.type === ActionTypes.INIT\n      ? 'preloadedState argument passed to createStore'\n      : 'previous state received by the reducer'\n\n  if (reducerKeys.length === 0) {\n    return (\n      'Store does not have a valid reducer. Make sure the argument passed ' +\n      'to combineReducers is an object whose values are reducers.'\n    )\n  }\n\n  if (!isPlainObject(inputState)) {\n    return (\n      `The ${argumentName} has unexpected type of \"${kindOf(\n        inputState\n      )}\". Expected argument to be an object with the following ` +\n      `keys: \"${reducerKeys.join('\", \"')}\"`\n    )\n  }\n\n  const unexpectedKeys = Object.keys(inputState).filter(\n    key => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]\n  )\n\n  unexpectedKeys.forEach(key => {\n    unexpectedKeyCache[key] = true\n  })\n\n  if (action && action.type === ActionTypes.REPLACE) return\n\n  if (unexpectedKeys.length > 0) {\n    return (\n      `Unexpected ${unexpectedKeys.length > 1 ? 'keys' : 'key'} ` +\n      `\"${unexpectedKeys.join('\", \"')}\" found in ${argumentName}. ` +\n      `Expected to find one of the known reducer keys instead: ` +\n      `\"${reducerKeys.join('\", \"')}\". Unexpected keys will be ignored.`\n    )\n  }\n}\n\nfunction assertReducerShape(reducers: {\n  [key: string]: Reducer<any, any, any>\n}) {\n  Object.keys(reducers).forEach(key => {\n    const reducer = reducers[key]\n    const initialState = reducer(undefined, { type: ActionTypes.INIT })\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\n        `The slice reducer for key \"${key}\" returned undefined during initialization. ` +\n          `If the state passed to the reducer is undefined, you must ` +\n          `explicitly return the initial state. The initial state may ` +\n          `not be undefined. If you don't want to set a value for this reducer, ` +\n          `you can use null instead of undefined.`\n      )\n    }\n\n    if (\n      typeof reducer(undefined, {\n        type: ActionTypes.PROBE_UNKNOWN_ACTION()\n      }) === 'undefined'\n    ) {\n      throw new Error(\n        `The slice reducer for key \"${key}\" returned undefined when probed with a random type. ` +\n          `Don't try to handle '${ActionTypes.INIT}' or other actions in \"redux/*\" ` +\n          `namespace. They are considered private. Instead, you must return the ` +\n          `current state for any unknown actions, unless it is undefined, ` +\n          `in which case you must return the initial state, regardless of the ` +\n          `action type. The initial state may not be undefined, but can be null.`\n      )\n    }\n  })\n}\n\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @template S Combined state object type.\n *\n * @param reducers An object whose values correspond to different reducer\n *   functions that need to be combined into one. One handy way to obtain it\n *   is to use `import * as reducers` syntax. The reducers may never\n *   return undefined for any action. Instead, they should return their\n *   initial state if the state passed to them was undefined, and the current\n *   state for any unrecognized action.\n *\n * @returns A reducer function that invokes every reducer inside the passed\n *   object, and builds a state object with the same shape.\n */\nexport default function combineReducers<M>(\n  reducers: M\n): M[keyof M] extends Reducer<any, any, any> | undefined\n  ? Reducer<\n      StateFromReducersMapObject<M>,\n      ActionFromReducersMapObject<M>,\n      Partial<PreloadedStateShapeFromReducersMapObject<M>>\n    >\n  : never\nexport default function combineReducers(reducers: {\n  [key: string]: Reducer<any, any, any>\n}) {\n  const reducerKeys = Object.keys(reducers)\n  const finalReducers: { [key: string]: Reducer<any, any, any> } = {}\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i]\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(`No reducer provided for key \"${key}\"`)\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key]\n    }\n  }\n  const finalReducerKeys = Object.keys(finalReducers)\n\n  // This is used to make sure we don't warn about the same\n  // keys multiple times.\n  let unexpectedKeyCache: { [key: string]: true }\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {}\n  }\n\n  let shapeAssertionError: unknown\n  try {\n    assertReducerShape(finalReducers)\n  } catch (e) {\n    shapeAssertionError = e\n  }\n\n  return function combination(\n    state: StateFromReducersMapObject<typeof reducers> = {},\n    action: Action\n  ) {\n    if (shapeAssertionError) {\n      throw shapeAssertionError\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      const warningMessage = getUnexpectedStateShapeWarningMessage(\n        state,\n        finalReducers,\n        action,\n        unexpectedKeyCache\n      )\n      if (warningMessage) {\n        warning(warningMessage)\n      }\n    }\n\n    let hasChanged = false\n    const nextState: StateFromReducersMapObject<typeof reducers> = {}\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i]\n      const reducer = finalReducers[key]\n      const previousStateForKey = state[key]\n      const nextStateForKey = reducer(previousStateForKey, action)\n      if (typeof nextStateForKey === 'undefined') {\n        const actionType = action && action.type\n        throw new Error(\n          `When called with an action of type ${\n            actionType ? `\"${String(actionType)}\"` : '(unknown type)'\n          }, the slice reducer for key \"${key}\" returned undefined. ` +\n            `To ignore an action, you must explicitly return the previous state. ` +\n            `If you want this reducer to hold no value, you can return null instead of undefined.`\n        )\n      }\n      nextState[key] = nextStateForKey\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey\n    }\n    hasChanged =\n      hasChanged || finalReducerKeys.length !== Object.keys(state).length\n    return hasChanged ? nextState : state\n  }\n}\n","import type { Dispatch } from './types/store'\nimport type { ActionCreator, ActionCreatorsMapObject, Action } from './types/actions'\nimport { kindOf } from './utils/kindOf'\n\nfunction bindActionCreator<A extends Action>(\n  actionCreator: ActionCreator<A>,\n  dispatch: Dispatch<A>\n) {\n  return function (this: any, ...args: any[]) {\n    return dispatch(actionCreator.apply(this, args))\n  }\n}\n\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use `import * as`\n * syntax. You may also pass a single function.\n *\n * @param dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\nexport default function bindActionCreators<A, C extends ActionCreator<A>>(\n  actionCreator: C,\n  dispatch: Dispatch\n): C\n\nexport default function bindActionCreators<\n  A extends ActionCreator<any>,\n  B extends ActionCreator<any>\n>(actionCreator: A, dispatch: Dispatch): B\n\nexport default function bindActionCreators<\n  A,\n  M extends ActionCreatorsMapObject<A>\n>(actionCreators: M, dispatch: Dispatch): M\nexport default function bindActionCreators<\n  M extends ActionCreatorsMapObject,\n  N extends ActionCreatorsMapObject\n>(actionCreators: M, dispatch: Dispatch): N\n\nexport default function bindActionCreators(\n  actionCreators: ActionCreator<any> | ActionCreatorsMapObject,\n  dispatch: Dispatch\n) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch)\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\n      `bindActionCreators expected an object or a function, but instead received: '${kindOf(\n        actionCreators\n      )}'. ` +\n        `Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`\n    )\n  }\n\n  const boundActionCreators: ActionCreatorsMapObject = {}\n  for (const key in actionCreators) {\n    const actionCreator = actionCreators[key]\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)\n    }\n  }\n  return boundActionCreators\n}\n","type Func<T extends any[], R> = (...a: T) => R\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for the\n * resulting composite function.\n *\n * @param funcs The functions to compose.\n * @returns A function obtained by composing the argument functions from right\n *   to left. For example, `compose(f, g, h)` is identical to doing\n *   `(...args) => f(g(h(...args)))`.\n */\nexport default function compose(): <R>(a: R) => R\n\nexport default function compose<F extends Function>(f: F): F\n\n/* two functions */\nexport default function compose<A, T extends any[], R>(\n  f1: (a: A) => R,\n  f2: Func<T, A>\n): Func<T, R>\n\n/* three functions */\nexport default function compose<A, B, T extends any[], R>(\n  f1: (b: B) => R,\n  f2: (a: A) => B,\n  f3: Func<T, A>\n): Func<T, R>\n\n/* four functions */\nexport default function compose<A, B, C, T extends any[], R>(\n  f1: (c: C) => R,\n  f2: (b: B) => C,\n  f3: (a: A) => B,\n  f4: Func<T, A>\n): Func<T, R>\n\n/* rest */\nexport default function compose<R>(\n  f1: (a: any) => R,\n  ...funcs: Function[]\n): (...args: any[]) => R\n\nexport default function compose<R>(...funcs: Function[]): (...args: any[]) => R\n\nexport default function compose(...funcs: Function[]) {\n  if (funcs.length === 0) {\n    // infer the argument type so it is usable in inference down the line\n    return <T>(arg: T) => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce(\n    (a, b) =>\n      (...args: any) =>\n        a(b(...args))\n  )\n}\n","import compose from './compose'\nimport type { Middleware, MiddlewareAPI } from './types/middleware'\nimport type { StoreEnhancer, Dispatch } from './types/store'\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param middlewares The middleware chain to be applied.\n * @returns A store enhancer applying the middleware.\n *\n * @template Ext Dispatch signature added by a middleware.\n * @template S The type of the state supported by a middleware.\n */\nexport default function applyMiddleware(): StoreEnhancer\nexport default function applyMiddleware<Ext1, S>(\n  middleware1: Middleware<Ext1, S, any>\n): StoreEnhancer<{ dispatch: Ext1 }>\nexport default function applyMiddleware<Ext1, Ext2, S>(\n  middleware1: Middleware<Ext1, S, any>,\n  middleware2: Middleware<Ext2, S, any>\n): StoreEnhancer<{ dispatch: Ext1 & Ext2 }>\nexport default function applyMiddleware<Ext1, Ext2, Ext3, S>(\n  middleware1: Middleware<Ext1, S, any>,\n  middleware2: Middleware<Ext2, S, any>,\n  middleware3: Middleware<Ext3, S, any>\n): StoreEnhancer<{ dispatch: Ext1 & Ext2 & Ext3 }>\nexport default function applyMiddleware<Ext1, Ext2, Ext3, Ext4, S>(\n  middleware1: Middleware<Ext1, S, any>,\n  middleware2: Middleware<Ext2, S, any>,\n  middleware3: Middleware<Ext3, S, any>,\n  middleware4: Middleware<Ext4, S, any>\n): StoreEnhancer<{ dispatch: Ext1 & Ext2 & Ext3 & Ext4 }>\nexport default function applyMiddleware<Ext1, Ext2, Ext3, Ext4, Ext5, S>(\n  middleware1: Middleware<Ext1, S, any>,\n  middleware2: Middleware<Ext2, S, any>,\n  middleware3: Middleware<Ext3, S, any>,\n  middleware4: Middleware<Ext4, S, any>,\n  middleware5: Middleware<Ext5, S, any>\n): StoreEnhancer<{ dispatch: Ext1 & Ext2 & Ext3 & Ext4 & Ext5 }>\nexport default function applyMiddleware<Ext, S = any>(\n  ...middlewares: Middleware<any, S, any>[]\n): StoreEnhancer<{ dispatch: Ext }>\nexport default function applyMiddleware(\n  ...middlewares: Middleware[]\n): StoreEnhancer<any> {\n  return createStore => (reducer, preloadedState) => {\n    const store = createStore(reducer, preloadedState)\n    let dispatch: Dispatch = () => {\n      throw new Error(\n        'Dispatching while constructing your middleware is not allowed. ' +\n          'Other middleware would not be applied to this dispatch.'\n      )\n    }\n\n    const middlewareAPI: MiddlewareAPI = {\n      getState: store.getState,\n      dispatch: (action, ...args) => dispatch(action, ...args)\n    }\n    const chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose<typeof dispatch>(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}\n","import type { Action } from '../types/actions'\nimport isPlainObject from './isPlainObject'\n\nexport default function isAction(action: unknown): action is Action<string> {\n  return (\n    isPlainObject(action) &&\n    'type' in action &&\n    typeof (action as Record<'type', unknown>).type === 'string'\n  )\n}\n","// functions\nimport { createStore, legacy_createStore } from './createStore'\nimport combineReducers from './combineReducers'\nimport bindActionCreators from './bindActionCreators'\nimport applyMiddleware from './applyMiddleware'\nimport compose from './compose'\nimport isAction from './utils/isAction'\nimport isPlainObject from './utils/isPlainObject'\nimport __DO_NOT_USE__ActionTypes from './utils/actionTypes'\n\n// types\n// store\nexport type {\n  Dispatch,\n  Unsubscribe,\n  Observable,\n  Observer,\n  Store,\n  StoreCreator,\n  StoreEnhancer,\n  StoreEnhancerStoreCreator\n} from './types/store'\n// reducers\nexport {\n  Reducer,\n  ReducersMapObject,\n  StateFromReducersMapObject,\n  ReducerFromReducersMapObject,\n  ActionFromReducer,\n  ActionFromReducersMapObject,\n  PreloadedStateShapeFromReducersMapObject\n} from './types/reducers'\n// action creators\nexport { ActionCreator, ActionCreatorsMapObject } from './types/actions'\n// middleware\nexport { MiddlewareAPI, Middleware } from './types/middleware'\n// actions\nexport { Action, UnknownAction, AnyAction } from './types/actions'\n\nexport {\n  createStore,\n  legacy_createStore,\n  combineReducers,\n  bindActionCreators,\n  applyMiddleware,\n  compose,\n  isAction,\n  isPlainObject,\n  __DO_NOT_USE__ActionTypes\n}\n"],"names":[],"sourceRoot":""}